%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Number Letter Shifting Task 3 blocks version% 07/2017 by Kelvin Lui% Set the screen to 1024x768 resolution.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function [] = NumberLetterShifting(subjno,subjini,age,sex,hand)try    whichScreen = 0; %changed to 1 to test on laptop        Lkey = KbName('f');    Rkey = KbName('j');    spaceBar = KbName('space');    wrongkey=MakeBeep(700,0.1);    hand = hand;        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Open screens    bcolor=255;    screenNumber=whichScreen;    [windowPtr, screenRect]=Screen('OpenWindow',screenNumber, bcolor, [], 32, 2); % open screen    midWidth=round(RectWidth(screenRect)/2);    % get center coordinates    midLength=round(RectHeight(screenRect)/2);    x_max = screenRect(3); %maximum x coord    y_max = screenRect(4); %maximum y coord    center_x = screenRect(3)/2; %center x coord    center_y = screenRect(4)/2; %center y coord    Screen('FillRect', windowPtr, bcolor);  % put on a white screen    Screen('Flip',windowPtr);    oldTextSize=Screen('TextSize', windowPtr, 12);            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Open data file    outfilename=['NumberLetterShifting_Data/NumberLetterShifting_',subjno,'_',subjini,'.txt'];	% set data file directory and name    dataFile=fopen(outfilename,'w');    fprintf(dataFile,('\nsubjno\tsubjini\tage\tsex\tblkno\tm\ttrialtype\ttask\trepeat\tletnumorder\tlettype\tletter\tnumtype\tnumber\tcorrans\tresp\tac\trt'));        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Fixation    fixation = uint8(ones(7)*255);    fixation(4,:) = 0;    fixation(:,4) = 0;        HideCursor;        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Set up design and trials: 2 practice (24 trials each) 3 test (48 test trials + 6 warm up trials = 54 trials each)    % blkno = 1,2,3,4,5    % trialtype = 1,2 (warmup, test)    % task = 1,2 (letter, number)    % repeat = 0,1,2 (first, repeat, switch)    % letnumorder = 1,2 (letnum, numlet)    % lettype = 1,2 (vowel, consonant)    % letter = 1,2,3,4,5,6,7,8 (A,E,I,U,G,K,M,R)    % numtype = 1,2 (odd, even)    % number = 2,3,4,5,6,7,8,9            % mixed blocks    for b = 1:5                design_let1 = repmat([1 1; 1 2; 1 3; 1 4; 2 5; 2 6; 2 7; 2 8],4,1);	% lettype, letter, make it 32 trials        design_let2 = [rand(32,1) repmat([ 1 3; 1 5; 1 7; 1 9; 2 2; 2 4; 2 6; 2 8],4,1)];	% numtype, number        design_let2 = sortrows(design_let2,1);	% randomize        design_let2 = design_let2(:,2:3); % remove random number        design_let = [design_let1 design_let2];        design_let = [rand(32,1) design_let];	% randomize        design_let = sortrows(design_let,1);        design_let = design_let(:,2:5);                design_num1 = repmat([ 1 3; 1 5; 1 7; 1 9; 2 2; 2 4; 2 6; 2 8],4,1);	% numtype, number, make it 32 trials        design_num2 = [rand(32,1) repmat([1 1; 1 2; 1 3; 1 4; 2 5; 2 6; 2 7; 2 8],4,1)];	% lettype, letter        design_num2 = sortrows(design_num2,1);	% randomize        design_num2 = design_num2(:,2:3); % remove random number        design_num = [design_num2 design_num1];        design_num = [rand(32,1) design_num];	% randomize        design_num = sortrows(design_num,1);        design_num = design_num(:,2:5);                loop = 0;        while loop == 0            error = 0;            scount = 0;            design_repeat1 = [rand(6,1) [1;2;1;2;1;2]];            design_repeat1 = sortrows(design_repeat1,1);	% randomize            design_repeat1 = design_repeat1(:,2); % remove random number            design_repeat1(1)=0;            design_repeat2 = [rand(48,1) repmat([1;2],24,1)];            design_repeat2 = sortrows(design_repeat2,1);	% randomize            design_repeat2 = design_repeat2(:,2); % remove random number            design_repeat = [design_repeat1;design_repeat2];                        design_task(1,1)=Randi(2);            for i = 2:54                switch design_repeat(i),                    case 1, design_task(i,1)=design_task(i-1,1); scount = 0;                    case 2, design_task(i,1)=3-design_task(i-1,1); scount = scount + 1;                        if scount == 5, %constraint - no more than four switch trials could occur in a row                            error = 1;                        end                end            end                        if sum(design_task) == 81 && error == 0 %constraint - equal number of both tasks                loop = 1;            else                loop = 0;            end        end                design_letnumorder = Shuffle([repmat(1,27,1); repmat(2,27,1)]);                design = [repmat(b,54,1) [repmat(1,6,1);repmat(2,48,1); ] design_task design_repeat design_letnumorder];                lcount=0;        ncount=0;        for i = 1:54            switch design_task(i)                case 1, lcount=lcount+1; design(i,6:9) = design_let(lcount,1:4);                case 2, ncount=ncount+1; design(i,6:9) = design_num(ncount,1:4);            end        end                for i = 2:54 %no stimulus negative priming for both repeat and switch trials            switch design(i,3) %task type                case 1,                    if design(i,7) == design(i-1,7)                        switch design(i-1,7)                            case 1, design(i,7) = Randi(3)+1;                            case 2, design(i,7) = Randi(3);                                if design(i,7) == 2                                    design(i,7)=4;                                end                            case 3,design(i,7) = Randi(3);                                if design(i,7) == 3                                    design(i,7)=4;                                end                            case 4,design(i,7) = Randi(3);                            case 5,design(i,7) = Randi(3)+5;                            case 6,design(i,7) = Randi(3)+4;                                if design(i,7) == 6                                    design(i,7)=8;                                end                            case 7,design(i,7) = Randi(3)+4;                                if design(i,7) == 7                                    design(i,7)=8;                                end                            case 8,design(i,7) = Randi(3)+4;                        end                    end                case 2,                    if design(i,9) == design(i-1,9)                        switch design(i-1,9)                            case 2, design(i,9) = (Randi(3)+1)*2;                            case 3, design(i,9) = (Randi(3)+2)*2-1;                            case 4,design(i,9) = Randi(3)*2;                                if design(i,9) == 4                                    design(i,9)=8;                                end                            case 5,design(i,9) = Randi(3)*2+1;                                if design(i,9) == 5                                    design(i,9)=9;                                end                            case 6,design(i,9) = Randi(3)*2;                                if design(i,9) == 6                                    design(i,9)=8;                                end                            case 7,design(i,9) = Randi(3)*2+1;                                if design(i,9) == 7                                    design(i,9)=9;                                end                            case 8,design(i,9) = Randi(3)*2;                            case 9,design(i,9) = Randi(3)*2+1;                        end                    end            end        end                switch b            case 1, design1 = design;            case 2, design2 = design;            case 3, design3 = design;            case 4, design4 = design;            case 5, design5 = design;        end            end        design = [design1(1:24,:);design2(1:24,:);design3;design4;design5]; % combine all blocks    for i = 1:48        design(i,2)=1;    end            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Prepare instruction        noticeF1 = 'Sorry! The answer is not correct.';    noticeF2 = 'Press space bar to continue.';        noticeP1 = 'Practice trials are now over.';    noticeP2 = 'Press the space bar to begin the actual experiment.';        noticeB1 = 'A block is about to begin.';    noticeB2 = 'In this block you will perform either LETTER or NUMBER judgment, depending on the cue each time.';    noticeB3 = 'Try to be as accurate and fast as possible; ACCURACY however is more important.';    noticeB4 = 'When you are ready, please press the space bar to start the trials.';        noticeEnd = 'Thank you. This is the end of the task. Please get the experimenter';        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Give Instruction        notice0 = 'LETTER/NUMBER task';        notice1 = 'On each trial you will first see a square cue, followed by a letter-digit pair (e.g., "2G", "A3").';    notice2 = 'When the square is above the line, you will have to judge if the number is odd or even, ignoring the letter.';    notice3 = 'Press the "F" key for an odd number and the "J" key for an even number.';    notice4 = 'When the square is below the line, you will have to judge if the letter is a vowel or consonant, ignoring the number.';    notice5 = 'Press the "F" key for a vowel and the "J" key for a consonant.';    notice6 = 'We will remind you of this rule periodically, but it will never change.';    notice7 = 'Try to be as accurate and fast as possible; ACCURACY however is more important.';    notice8 = 'You will be offered a break periodically to rest.';    notice9 = 'You will first have some practice trials. You will be warned before the start of the actual experiment.';    notice10 = 'If you are ready to begin, press the space bar to start the practice trials.';       Screen('DrawText', windowPtr, notice0, 100, 100);        Screen('DrawText', windowPtr, notice1, 100, 150);        Screen('DrawText', windowPtr, notice2, 100, 200);    Screen('DrawText', windowPtr, notice3, 100, 230);        Screen('DrawText', windowPtr, notice4, 100, 280);    Screen('DrawText', windowPtr, notice5, 100, 310);        Screen('DrawText', windowPtr, notice6, 100, 360);    Screen('DrawText', windowPtr, notice7, 100, 390);        Screen('DrawText', windowPtr, notice8, 100, 440);        Screen('DrawText', windowPtr, notice9, 100, 490);    Screen('DrawText', windowPtr, notice10, 100, 530);        Screen('Flip', windowPtr);        WaitSecs(.2);        touch=0;		% Detect space bar press to continue    while ~touch        [touch,tpress,keycode]=KbCheck;        if keycode(spaceBar); break; else touch=0; end    end    while KbCheck; end        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    % Present trials        for m = 1:210                blkno = design(m,1);                switch design(m,2)            case 1, trialtype = 'warmup';            case 2, trialtype = 'test';        end                switch design(m,3)            case 1, task = 'letter';            case 2, task = 'number';        end                switch design(m,4)            case 0, repeat = 'first';            case 1, repeat = 'repeat';            case 2, repeat = 'switch';        end                switch design(m,5)            case 1, letnumorder = 'letnum';            case 2, letnumorder = 'numlet';        end                switch design(m,6)            case 1, lettype = 'vowel';            case 2, lettype = 'consonant';        end                switch design(m,7)            case 1, letter = 'A';            case 2, letter = 'E';            case 3, letter = 'I';            case 4, letter = 'U';            case 5, letter = 'G';            case 6, letter = 'K';            case 7, letter = 'M';            case 8, letter = 'R';        end                switch design(m,8)            case 1, numtype = 'odd';            case 2, numtype = 'even';        end                switch design(m,9)            case 2, number = '2';            case 3, number = '3';            case 4, number = '4';            case 5, number = '5';            case 6, number = '6';            case 7, number = '7';            case 8, number = '8';            case 9, number = '9';        end                % Set correct answer        if (strcmp(task,'letter') && strcmp(lettype,'vowel')) || (strcmp(task,'number') && strcmp(numtype,'odd'))            corrans = 1;        elseif (strcmp(task,'letter') && strcmp(lettype,'consonant')) || (strcmp(task,'number') && strcmp(numtype,'even'))            corrans = 2;        end                CSI = 0.15;                % Notice at the beginning of a block        if m == 1 || m == 25|| m == 49 || m == 103|| m == 156;                        Screen('Drawtext', windowPtr, noticeB1, 100, 130);            Screen('Drawtext', windowPtr, noticeB2, 100, 170);            Screen('Drawtext', windowPtr, notice2, 100, 210);            Screen('Drawtext', windowPtr, notice3, 100, 250);            Screen('Drawtext', windowPtr, notice4, 100, 290);            Screen('Drawtext', windowPtr, notice5, 100, 330);            Screen('Drawtext', windowPtr, noticeB3, 100, 370);            Screen('Drawtext', windowPtr, noticeB4, 100, 410);            Screen('Flip', windowPtr);            WaitSecs(.5);                        touch=0;		% Detect space bar press to continue            while ~touch                [touch,tpress,keycode]=KbCheck;                if keycode(spaceBar); break; else; touch=0; end            end            while KbCheck; end            WaitSecs(1);        end                % Show blank screen        Screen('FillRect', windowPtr, bcolor);  % blank screen        vpl = Screen('Flip', windowPtr);                % Show cue        Screen('DrawLine', windowPtr,[0 0 0],1,(y_max/2),x_max,(y_max/2),2);        switch task            case 'letter', Screen('FrameRect', windowPtr, [0 0 0],[center_x-25,center_y+35,center_x+25,center_y+85],2);            case 'number', Screen('FrameRect', windowPtr, [0 0 0],[center_x-25,center_y-85,center_x+25,center_y-35],2);        end        vpl = Screen('Flip', windowPtr, vpl+0.35);                        % Show letter-number pair        oldTextSize=Screen('TextSize', windowPtr, 18);        Screen('DrawLine', windowPtr,[0 0 0],1,(y_max/2),x_max,(y_max/2),2);        switch task            case 'letter', Screen('FrameRect', windowPtr, [0 0 0],[center_x-25,center_y+35,center_x+25,center_y+85],2);                switch letnumorder                    case 'letnum', Screen('Drawtext', windowPtr, [letter  number], center_x-15, center_y+45);                    case 'numlet', Screen('Drawtext', windowPtr, [number  letter], center_x-15, center_y+45);                end            case 'number', Screen('FrameRect', windowPtr, [0 0 0],[center_x-25,center_y-85,center_x+25,center_y-35],2);                switch letnumorder                    case 'letnum', Screen('Drawtext', windowPtr, [letter  number], center_x-15, center_y-75);                    case 'numlet', Screen('Drawtext', windowPtr, [number  letter], center_x-15, center_y-75);                end        end        vpl = Screen('Flip', windowPtr, vpl+CSI);        oldTextSize=Screen('TextSize', windowPtr, 12);                % Record key press & response time        tstart=GetSecs;        touch=0;        noresponse=0;        while touch==0            [touch,tpress,keyCode]=KbCheck;            rt(m)=(tpress-tstart)*1000;		%response time            if  keyCode(Lkey)||keyCode(Rkey)                break;            elseif touch    %wrong key pressed                Snd('Play',wrongkey);                WaitSecs(0.5);                Snd('Quiet');Snd('Close');            end            touch=0;        end                % Collect accuracy        if ~noresponse  %%gave a response            if keyCode(Lkey)                resp = 1;                            elseif keyCode(Rkey)                resp = 2;            end                        if resp==corrans                ac(m)=1;            else                ac(m)=0;            end                    else  %did not respond            resp=0;            ac(m)=-10000;            rt(m)=-1000000;        end                FlushEvents('keyDown');                % Feedback for incorrect trials        if m < 49 && ac(m)==0            Screen('Drawtext', windowPtr, noticeF1, midWidth-100, midLength+100);            Screen('Drawtext', windowPtr, noticeF2, midWidth-100, midLength+130);            Screen('Flip', windowPtr);            Snd('Play',wrongkey);            WaitSecs(.5);            Snd('Quiet');Snd('Close');                        touch=0;		% Detect space bar press to continue            while ~touch                [touch,tpress,keycode]=KbCheck;                if keycode(spaceBar); break; else; touch=0; end            end            while KbCheck; end        end                % Signal the end of practice        if m == 48                        Screen('Drawtext', windowPtr, noticeP1, 100, 100);  % inform Ss that practice has ended            Screen('Drawtext', windowPtr, noticeP2, 100, 130);            Screen('Flip', windowPtr);            WaitSecs(.5);                        touch=0;		% Detect space bar press to continue            while ~touch                [touch,tpress,keycode]=KbCheck;                if keycode(spaceBar); break; else touch=0; end            end            while KbCheck; end        end                % Save data to text file        fprintf(dataFile, ('\n%s\t%s\t%s\t%s\t%d\t%d\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%d\t%d\t%d\t%f'),...            subjno,subjini,age,sex,blkno,m,trialtype,task,repeat,letnumorder,lettype,letter,numtype,number,corrans,resp,ac(m),rt(m));                FlushEvents('keyDown');        touch=0;            end            % Close data files    fclose('all');        % Show notice for the end of experiment    Screen('Drawtext', windowPtr, noticeEnd, 100, 400);    Screen('Flip', windowPtr);    WaitSecs(.2);        % Press any key to quit the program    FlushEvents('keyDown');    pressKey = KbWait;        ShowCursor;    Screen('CloseAll');    catch        ShowCursor;    Screen('CloseAll');    rethrow(lasterror);endend